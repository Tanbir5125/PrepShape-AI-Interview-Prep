{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/tannu/Desktop/Project/interview_prep/constants/index.ts"],"sourcesContent":["import { CreateAssistantDTO } from \"@vapi-ai/web/dist/api\";\nimport { z } from \"zod\";\n\nexport const mappings = {\n  \"react.js\": \"react\",\n  reactjs: \"react\",\n  react: \"react\",\n  \"next.js\": \"nextjs\",\n  nextjs: \"nextjs\",\n  next: \"nextjs\",\n  \"vue.js\": \"vuejs\",\n  vuejs: \"vuejs\",\n  vue: \"vuejs\",\n  \"express.js\": \"express\",\n  expressjs: \"express\",\n  express: \"express\",\n  \"node.js\": \"nodejs\",\n  nodejs: \"nodejs\",\n  node: \"nodejs\",\n  mongodb: \"mongodb\",\n  mongo: \"mongodb\",\n  mongoose: \"mongoose\",\n  mysql: \"mysql\",\n  postgresql: \"postgresql\",\n  sqlite: \"sqlite\",\n  firebase: \"firebase\",\n  docker: \"docker\",\n  kubernetes: \"kubernetes\",\n  aws: \"aws\",\n  azure: \"azure\",\n  gcp: \"gcp\",\n  digitalocean: \"digitalocean\",\n  heroku: \"heroku\",\n  photoshop: \"photoshop\",\n  \"adobe photoshop\": \"photoshop\",\n  html5: \"html5\",\n  html: \"html5\",\n  css3: \"css3\",\n  css: \"css3\",\n  sass: \"sass\",\n  scss: \"sass\",\n  less: \"less\",\n  tailwindcss: \"tailwindcss\",\n  tailwind: \"tailwindcss\",\n  bootstrap: \"bootstrap\",\n  jquery: \"jquery\",\n  typescript: \"typescript\",\n  ts: \"typescript\",\n  javascript: \"javascript\",\n  js: \"javascript\",\n  \"angular.js\": \"angular\",\n  angularjs: \"angular\",\n  angular: \"angular\",\n  \"ember.js\": \"ember\",\n  emberjs: \"ember\",\n  ember: \"ember\",\n  \"backbone.js\": \"backbone\",\n  backbonejs: \"backbone\",\n  backbone: \"backbone\",\n  nestjs: \"nestjs\",\n  graphql: \"graphql\",\n  \"graph ql\": \"graphql\",\n  apollo: \"apollo\",\n  webpack: \"webpack\",\n  babel: \"babel\",\n  \"rollup.js\": \"rollup\",\n  rollupjs: \"rollup\",\n  rollup: \"rollup\",\n  \"parcel.js\": \"parcel\",\n  parceljs: \"parcel\",\n  npm: \"npm\",\n  yarn: \"yarn\",\n  git: \"git\",\n  github: \"github\",\n  gitlab: \"gitlab\",\n  bitbucket: \"bitbucket\",\n  figma: \"figma\",\n  prisma: \"prisma\",\n  redux: \"redux\",\n  flux: \"flux\",\n  redis: \"redis\",\n  selenium: \"selenium\",\n  cypress: \"cypress\",\n  jest: \"jest\",\n  mocha: \"mocha\",\n  chai: \"chai\",\n  karma: \"karma\",\n  vuex: \"vuex\",\n  \"nuxt.js\": \"nuxt\",\n  nuxtjs: \"nuxt\",\n  nuxt: \"nuxt\",\n  strapi: \"strapi\",\n  wordpress: \"wordpress\",\n  contentful: \"contentful\",\n  netlify: \"netlify\",\n  vercel: \"vercel\",\n  \"aws amplify\": \"amplify\",\n};\n\nexport const interviewer: CreateAssistantDTO = {\n  name: \"Interviewer\",\n  firstMessage:\n    \"Hello! Thank you for taking the time to speak with me today. I'm excited to learn more about you and your experience.\",\n  transcriber: {\n    provider: \"deepgram\",\n    model: \"nova-2\",\n    language: \"en\",\n  },\n  voice: {\n    provider: \"11labs\",\n    voiceId: \"sarah\",\n    stability: 0.4,\n    similarityBoost: 0.8,\n    speed: 0.9,\n    style: 0.5,\n    useSpeakerBoost: true,\n  },\n  model: {\n    provider: \"openai\",\n    model: \"gpt-4\",\n    messages: [\n      {\n        role: \"system\",\n        content: `You are a professional job interviewer conducting a real-time voice interview with a candidate. Your goal is to assess their qualifications, motivation, and fit for the role.\n\nInterview Guidelines:\nFollow the structured question flow:\n{{questions}}\n\nEngage naturally & react appropriately:\nListen actively to responses and acknowledge them before moving forward.\nAsk brief follow-up questions if a response is vague or requires more detail.\nKeep the conversation flowing smoothly while maintaining control.\nBe professional, yet warm and welcoming:\n\nUse official yet friendly language.\nKeep responses concise and to the point (like in a real voice interview).\nAvoid robotic phrasing—sound natural and conversational.\nAnswer the candidate’s questions professionally:\n\nIf asked about the role, company, or expectations, provide a clear and relevant answer.\nIf unsure, redirect the candidate to HR for more details.\n\nConclude the interview properly:\nThank the candidate for their time.\nInform them that the company will reach out soon with feedback.\nEnd the conversation on a polite and positive note.\n\n\n- Be sure to be professional and polite.\n- Keep all your responses short and simple. Use official language, but be kind and welcoming.\n- This is a voice conversation, so keep your responses short, like in a real conversation. Don't ramble for too long.`,\n      },\n    ],\n  },\n};\n\nexport const feedbackSchema = z.object({\n  totalScore: z.number(),\n  categoryScores: z.tuple([\n    z.object({\n      name: z.literal(\"Communication Skills\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Technical Knowledge\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Problem Solving\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Cultural Fit\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n    z.object({\n      name: z.literal(\"Confidence and Clarity\"),\n      score: z.number(),\n      comment: z.string(),\n    }),\n  ]),\n  strengths: z.array(z.string()),\n  areasForImprovement: z.array(z.string()),\n  finalAssessment: z.string(),\n});\n\nexport const interviewCovers = [\n  \"/adobe.png\",\n  \"/amazon.png\",\n  \"/facebook.png\",\n  \"/hostinger.png\",\n  \"/pinterest.png\",\n  \"/quora.png\",\n  \"/reddit.png\",\n  \"/skype.png\",\n  \"/spotify.png\",\n  \"/telegram.png\",\n  \"/tiktok.png\",\n  \"/yahoo.png\",\n];\n\nexport const dummyInterviews: Interview[] = [\n  {\n    id: \"1\",\n    userId: \"user1\",\n    role: \"Frontend Developer\",\n    type: \"Technical\",\n    techstack: [\"React\", \"TypeScript\", \"Next.js\", \"Tailwind CSS\"],\n    level: \"Junior\",\n    questions: [\"What is React?\"],\n    finalized: false,\n    createdAt: \"2024-03-15T10:00:00Z\",\n  },\n  {\n    id: \"2\",\n    userId: \"user1\",\n    role: \"Full Stack Developer\",\n    type: \"Mixed\",\n    techstack: [\"Node.js\", \"Express\", \"MongoDB\", \"React\"],\n    level: \"Senior\",\n    questions: [\"What is Node.js?\"],\n    finalized: false,\n    createdAt: \"2024-03-14T15:30:00Z\",\n  },\n];"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 258, "column": 0}, "map": {"version":3,"sources":["file:///Users/tannu/Desktop/Project/interview_prep/lib/actions/general.action.ts"],"sourcesContent":["'use server';\n\nimport { feedbackSchema } from \"@/constants\";\nimport { db } from \"@/firebase/admin\";\nimport { google } from \"@ai-sdk/google\";\nimport { generateObject } from \"ai\";\n\nexport async function getInterviewsByUserID(\n  userId: string\n): Promise<Interview[] | null> {\n  const interviews = await db\n    .collection(\"interviews\")\n    .where(\"userId\", \"==\", userId)\n    .orderBy(\"createdAt\", \"desc\")\n    .get();\n\n  return interviews.docs.map((doc) => ({\n    id: doc.id,\n    ...doc.data(),\n  })) as Interview[];\n}\n\nexport async function getLatestInterviews(\n  params: GetLatestInterviewsParams\n): Promise<Interview[] | null> {\n  const { userId, limit = 20 } = params;\n\n  const interviews = await db\n    .collection(\"interviews\")\n    .orderBy(\"createdAt\", \"desc\")\n    .where(\"finalized\", \"==\", true)\n    .where(\"userId\", \"!=\", userId)\n    .limit(limit)\n    .get();\n\n  return interviews.docs.map((doc) => ({\n    id: doc.id,\n    ...doc.data(),\n  })) as Interview[];\n}\n\nexport async function getInterviewsById(id: string): Promise<Interview | null> {\n  const interview = await db.collection(\"interviews\").doc(id).get();\n\n  return interview.data() as Interview | null;\n}\n\nexport async function createFeedback(params: CreateFeedbackParams) {\n  const { interviewId, userId, transcript } = params;\n\n  try {\n    const formattedTranscript = transcript\n      .map(\n        (sentence: { role: string; content: string }) =>\n          `- ${sentence.role}: ${sentence.content}\\n`\n      )\n      .join(\"\");\n\n    const {\n      object: {\n        totalScore,\n        categoryScores,\n        strengths,\n        areasForImprovement,\n        finalAssessment,\n      },\n    } = await generateObject({\n      model: google(\"gemini-2.5-pro\", {\n        structuredOutputs: false,\n      }),\n      schema: feedbackSchema,\n      prompt: `\n        You are an AI interviewer analyzing a mock interview. Your task is to evaluate the candidate based on structured categories. Be thorough and detailed in your analysis. Don't be lenient with the candidate. If there are mistakes or areas for improvement, point them out.\n        Transcript:\n        ${formattedTranscript}\n\n        Please score the candidate from 0 to 100 in the following areas. Do not add categories other than the ones provided:\n        - **Communication Skills**: Clarity, articulation, structured responses.\n        - **Technical Knowledge**: Understanding of key concepts for the role.\n        - **Problem-Solving**: Ability to analyze problems and propose solutions.\n        - **Cultural & Role Fit**: Alignment with company values and job role.\n        - **Confidence & Clarity**: Confidence in responses, engagement, and clarity.\n        `,\n      system:\n        \"You are a professional interviewer analyzing a mock interview. Your task is to evaluate the candidate based on structured categories\",\n    });\n\n    const feedback = await db.collection(\"feedback\").add({\n      interviewId,\n      userId,\n      totalScore,\n      categoryScores,\n      strengths,\n      areasForImprovement,\n      finalAssessment,\n      createdAt: new Date().toISOString(),\n    });\n\n    return {\n        success: true,\n        feedbackId: feedback.id,\n      };\n  } catch (error) {\n    console.error(\"Error saving feedback\", error);\n\n    return {\n        success : false\n    }\n  }\n}\n\nexport async function getFeedbackByInterviewId(\n  params: GetFeedbackByInterviewIdParams\n): Promise<Feedback | null> {\n  const { interviewId, userId } = params;\n\n  const feedback = await db\n    .collection(\"feedback\")\n    .where(\"interviewId\", \"==\", interviewId)\n    .where(\"userId\", \"==\", userId)\n    .limit(1)\n    .get();\n\n    if(feedback.empty) return null\n\n    const feedbackDoc = feedback.docs[0]\n\n  return {\n    id: feedbackDoc.id,\n   ...feedbackDoc.data(),\n  } as Feedback\n}"],"names":[],"mappings":";;;;;;;;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;AAEO,eAAe,sBACpB,MAAc;IAEd,MAAM,aAAa,MAAM,iHAAA,CAAA,KAAE,CACxB,UAAU,CAAC,cACX,KAAK,CAAC,UAAU,MAAM,QACtB,OAAO,CAAC,aAAa,QACrB,GAAG;IAEN,OAAO,WAAW,IAAI,CAAC,GAAG,CAAC,CAAC,MAAQ,CAAC;YACnC,IAAI,IAAI,EAAE;YACV,GAAG,IAAI,IAAI,EAAE;QACf,CAAC;AACH;AAEO,eAAe,oBACpB,MAAiC;IAEjC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,GAAG;IAE/B,MAAM,aAAa,MAAM,iHAAA,CAAA,KAAE,CACxB,UAAU,CAAC,cACX,OAAO,CAAC,aAAa,QACrB,KAAK,CAAC,aAAa,MAAM,MACzB,KAAK,CAAC,UAAU,MAAM,QACtB,KAAK,CAAC,OACN,GAAG;IAEN,OAAO,WAAW,IAAI,CAAC,GAAG,CAAC,CAAC,MAAQ,CAAC;YACnC,IAAI,IAAI,EAAE;YACV,GAAG,IAAI,IAAI,EAAE;QACf,CAAC;AACH;AAEO,eAAe,kBAAkB,EAAU;IAChD,MAAM,YAAY,MAAM,iHAAA,CAAA,KAAE,CAAC,UAAU,CAAC,cAAc,GAAG,CAAC,IAAI,GAAG;IAE/D,OAAO,UAAU,IAAI;AACvB;AAEO,eAAe,eAAe,MAA4B;IAC/D,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG;IAE5C,IAAI;QACF,MAAM,sBAAsB,WACzB,GAAG,CACF,CAAC,WACC,CAAC,EAAE,EAAE,SAAS,IAAI,CAAC,EAAE,EAAE,SAAS,OAAO,CAAC,EAAE,CAAC,EAE9C,IAAI,CAAC;QAER,MAAM,EACJ,QAAQ,EACN,UAAU,EACV,cAAc,EACd,SAAS,EACT,mBAAmB,EACnB,eAAe,EAChB,EACF,GAAG,MAAM,CAAA,GAAA,oJAAA,CAAA,iBAAc,AAAD,EAAE;YACvB,OAAO,CAAA,GAAA,uJAAA,CAAA,SAAM,AAAD,EAAE,kBAAkB;gBAC9B,mBAAmB;YACrB;YACA,QAAQ,kHAAA,CAAA,iBAAc;YACtB,QAAQ,CAAC;;;QAGP,EAAE,oBAAoB;;;;;;;;QAQtB,CAAC;YACH,QACE;QACJ;QAEA,MAAM,WAAW,MAAM,iHAAA,CAAA,KAAE,CAAC,UAAU,CAAC,YAAY,GAAG,CAAC;YACnD;YACA;YACA;YACA;YACA;YACA;YACA;YACA,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,OAAO;YACH,SAAS;YACT,YAAY,SAAS,EAAE;QACzB;IACJ,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QAEvC,OAAO;YACH,SAAU;QACd;IACF;AACF;AAEO,eAAe,yBACpB,MAAsC;IAEtC,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG;IAEhC,MAAM,WAAW,MAAM,iHAAA,CAAA,KAAE,CACtB,UAAU,CAAC,YACX,KAAK,CAAC,eAAe,MAAM,aAC3B,KAAK,CAAC,UAAU,MAAM,QACtB,KAAK,CAAC,GACN,GAAG;IAEJ,IAAG,SAAS,KAAK,EAAE,OAAO;IAE1B,MAAM,cAAc,SAAS,IAAI,CAAC,EAAE;IAEtC,OAAO;QACL,IAAI,YAAY,EAAE;QACnB,GAAG,YAAY,IAAI,EAAE;IACtB;AACF;;;IA5HsB;IAeA;IAmBA;IAMA;IAgEA;;AAxGA,+OAAA;AAeA,+OAAA;AAmBA,+OAAA;AAMA,+OAAA;AAgEA,+OAAA","debugId":null}},
    {"offset": {"line": 375, "column": 0}, "map": {"version":3,"sources":["file:///Users/tannu/Desktop/Project/interview_prep/.next-internal/server/app/%28root%29/interview/%5Bid%5D/feedback/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {isAuthenticated as '00e5193c9812e99759958790c45ee6f61eb7d05b33'} from 'ACTIONS_MODULE0'\nexport {getCurrentUser as '00ec3397cc99979a5b2021388f2d3ae71194acec07'} from 'ACTIONS_MODULE0'\nexport {signIn as '4026c0f2e815bcae57c7bee9f892490234345f2ec7'} from 'ACTIONS_MODULE0'\nexport {signUp as '4093a3a96af9dd417d37d7ddcdf26fd8ad157cc0b4'} from 'ACTIONS_MODULE0'\nexport {setSessionCookie as '4099e18b0b46f8d6bdfe1ac33cac768728d87e113c'} from 'ACTIONS_MODULE0'\nexport {getFeedbackByInterviewId as '40017117d2d0f2bb1e92803f0fd3cf47289288b5fd'} from 'ACTIONS_MODULE1'\nexport {getInterviewsByUserID as '406fd9d9ba55f607bd9466a5ed726e3890849f909c'} from 'ACTIONS_MODULE1'\nexport {getLatestInterviews as '408fe827503271b9005ce4f7972b602458dac30783'} from 'ACTIONS_MODULE1'\nexport {createFeedback as '40ac7b172ea80f91acc18ebd37ca6b9f9dfd4e5e9c'} from 'ACTIONS_MODULE1'\nexport {getInterviewsById as '40c244a9ee4409246ab21135c689cf14b8c668e02f'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AAKA","debugId":null}},
    {"offset": {"line": 483, "column": 0}, "map": {"version":3,"sources":["file:///Users/tannu/Desktop/Project/interview_prep/app/%28root%29/interview/%5Bid%5D/feedback/page.tsx"],"sourcesContent":["import { getCurrentUser } from \"@/lib/actions/auth.action\";\nimport { getFeedbackByInterviewId, getInterviewsById } from \"@/lib/actions/general.action\";\nimport { redirect } from \"next/navigation\";\nimport React from \"react\";\n\nconst page = async ({ params }: RouteParams) => {\n  const { id } = await params;\n  const user = await getCurrentUser();\n  const interview = await getInterviewsById(id);\n\n  if(!interview) redirect('/');\n\n  const feedback = await getFeedbackByInterviewId({ interviewId: id, userId: user?.id });\n\n  console.log(feedback)\n\n  return <div>Page</div>;\n};\n\nexport default page;\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;;;;;;;;;;AAGA,MAAM,OAAO,OAAO,EAAE,MAAM,EAAe;IACzC,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;IACrB,MAAM,OAAO,MAAM,CAAA,GAAA,gIAAA,CAAA,iBAAc,AAAD;IAChC,MAAM,YAAY,MAAM,CAAA,GAAA,mIAAA,CAAA,oBAAiB,AAAD,EAAE;IAE1C,IAAG,CAAC,WAAW,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IAExB,MAAM,WAAW,MAAM,CAAA,GAAA,mIAAA,CAAA,2BAAwB,AAAD,EAAE;QAAE,aAAa;QAAI,QAAQ,MAAM;IAAG;IAEpF,QAAQ,GAAG,CAAC;IAEZ,qBAAO,8OAAC;kBAAI;;;;;;AACd;uCAEe","debugId":null}}]
}